import UIKit

final class ImageProvider {
    static let shared = ImageProvider()
    private let cacheDirectory: URL?
    private let dictionaryKey = "cachedFiles"

    private init() {
        defer {
            print("üìÇ CacheDirectory" + String(describing: self.cacheDirectory))
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –¥–∏—Å–∫
        guard let cacheDirectory = FileManager.default.urls(for: .cachesDirectory, in: .userDomainMask).first else {
            print("‚õîÔ∏è Failed to get cache directory ‚õîÔ∏è")
            self.cacheDirectory = nil
            return
        }
        
        // –†–∞—Å—à–∏—Ä—è–µ–º url, —É–∫–∞–∑—ã–≤–∞—è –¥–æ–ø –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        self.cacheDirectory = cacheDirectory.appendingPathComponent("image_cache")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        do {
            guard let cacheDirectory = self.cacheDirectory else { return }
            try FileManager.default.createDirectory(at: cacheDirectory, withIntermediateDirectories: true, attributes: nil)
        } catch {
            print("Failed to create cache directory: \(error)")
        }
    }
    
    func fetchImage(from url: URL, completion: @escaping(Result<UIImage, Error>) -> Void) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞, –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –µ—Å—Ç—å
        if let cachedImage = getCachedImageFromDisk(by: url) {
            DispatchQueue.main.async {
                completion(.success(cachedImage))
            }
            print("‚¨ÖÔ∏è Image from cache with url: \(url)")
            return
        }

        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, —Ç–æ –≥—Ä—É–∑–∏–º –µ–≥–æ –∏–∑ —Å–µ—Ç–∏
        NetworkManager.shared.downloadImage(from: url) { [weak self] result in
            switch result {
            case .success(let data):
                    if let image = UIImage(data: data) {
                        print("‚úÖ Successfully downloaded image by url: \(url)")
                        self?.saveDataToDisk(with: data, for: url)
                        completion(.success(image))
                    } else {
                        print("‚õîÔ∏è Failed decoding downloaded data to UIImage by url: \(url)")
                        completion(.failure(NetworkError.noData))
                    }
            case .failure(let error):
                print("‚õîÔ∏è Failed download image by url: \(url), ‚ÅâÔ∏è reason: \(error)")
                DispatchQueue.main.async {
                    completion(.failure(error))
                }
            }
        }
    }

    private func saveDataToDisk(with data: Data, for url: URL) {
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        let uniqueFileName = UUID().uuidString
        guard let filePath = cacheDirectory?.appendingPathComponent(uniqueFileName) else { return }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        do {
            try data.write(to: filePath)
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ UserDefaults –ø–æ –∫–ª—é—á—É URL
            var cachedFilesDict = UserDefaults.standard.dictionary(forKey: dictionaryKey) ?? [String: String]()
            cachedFilesDict[url.absoluteString] = uniqueFileName
            UserDefaults.standard.set(cachedFilesDict, forKey: dictionaryKey)
            print("üìù SAVED IMAGE TO CACHE, path: \(filePath)")
        } catch {
            print("‚õîÔ∏è Failed to save image to cache: \(error)")
        }
    }

    private func getCachedImageFromDisk(by url: URL) -> UIImage? {
        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ UserDefaults –ø–æ –∫–ª—é—á—É URL
        guard let cachedFilesDict = UserDefaults.standard.dictionary(forKey: dictionaryKey) as? [String: String],
              let uniqueFileName = cachedFilesDict[url.absoluteString],
              let filePath = cacheDirectory?.appendingPathComponent(uniqueFileName)
        else { return nil }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if FileManager.default.fileExists(atPath: filePath.path) {
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
            if let data = try? Data(contentsOf: filePath) {
               return UIImage(data: data)
            }
        }
        return nil
    }
}
